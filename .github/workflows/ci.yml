name: CI

on:
  push:
    branches: [ main, master, develop, "**/feature/**", "**/fix/**" ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-test-e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    env:
      DOCKER_BUILDKIT: "1"
      COMPOSE_DOCKER_CLI_BUILD: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dev Doctor (.env, dirs)
        run: bash scripts/dev_doctor.sh

      - name: Build images
        run: |
          docker compose build api ui

      - name: Unit tests (dockerized)
        run: docker compose --profile test run --rm tests

      - name: Bring up stack
        run: docker compose --profile dev up -d

      - name: Wait for API health
        run: bash scripts/wait_for_http.sh http://localhost:8000/api/v1/health 180

      - name: E2E pipeline (inside api at /work)
        run: |
          docker compose exec -T api bash -lc 'set -euo pipefail; cd /work && \
            python scripts/generate_synth.py --n_accounts 3000 --fraud_rings 8 --seed 42 && \
            python scripts/ingest_demo.py --path data/raw/synth_edges.csv --neo4j 0 && \
            python -m app.ml.train_lgbm --features models/baseline/features.parquet --labels data/processed/labels.csv --out models/baseline && \
            python scripts/score_demo.py --topk 50'

      - name: Compose logs on failure
        if: failure()
        run: docker compose logs --no-color > compose_logs.txt || true

      - name: Upload compose logs (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose_logs.txt

      - name: Compose down
        if: always()
        run: docker compose down -v
